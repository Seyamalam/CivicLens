import React from 'react';
import { View, Text, TouchableOpacity, TextInput, ActivityIndicator } from 'react-native';
import { MotiView, MotiText } from 'moti';
import { styled } from 'nativewind';

// Styled components with NativeWind
const StyledView = styled(View);
const StyledText = styled(Text);
const StyledTouchableOpacity = styled(TouchableOpacity);
const StyledTextInput = styled(TextInput);

// CivicLens color constants for dynamic styling
export const colors = {
  primary: '#0891b2',    // Teal
  secondary: '#ea580c',  // Orange
  accent: '#7c3aed',     // Violet
  success: '#65a30d',    // Lime
  warning: '#d97706',    // Amber
  error: '#dc2626',      // Red
  gray: {
    50: '#f8fafc',
    100: '#f1f5f9',
    200: '#e2e8f0',
    300: '#cbd5e1',
    400: '#94a3b8',
    500: '#64748b',
    600: '#475569',
    700: '#334155',
    800: '#1e293b',
    900: '#0f172a',
  },
};\n\n// Card Component with animations\ninterface CardProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'primary' | 'secondary' | 'accent' | 'success' | 'warning' | 'error';\n  size?: 'sm' | 'md' | 'lg';\n  onPress?: () => void;\n  className?: string;\n  animate?: boolean;\n}\n\nexport const Card: React.FC<CardProps> = ({ \n  children, \n  variant = 'default', \n  size = 'md', \n  onPress, \n  className = '',\n  animate = true \n}) => {\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-gradient-to-br from-primary-50 to-primary-100 border-primary-200';\n      case 'secondary':\n        return 'bg-gradient-to-br from-secondary-50 to-secondary-100 border-secondary-200';\n      case 'accent':\n        return 'bg-gradient-to-br from-accent-50 to-accent-100 border-accent-200';\n      case 'success':\n        return 'bg-gradient-to-br from-success-50 to-success-100 border-success-200';\n      case 'warning':\n        return 'bg-gradient-to-br from-warning-50 to-warning-100 border-warning-200';\n      case 'error':\n        return 'bg-gradient-to-br from-error-50 to-error-100 border-error-200';\n      default:\n        return 'bg-white border-gray-200';\n    }\n  };\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'sm': return 'p-4';\n      case 'lg': return 'p-8';\n      default: return 'p-6';\n    }\n  };\n\n  const baseStyles = `rounded-2xl border shadow-lg ${getVariantStyles()} ${getSizeStyles()} ${className}`;\n\n  if (onPress) {\n    return (\n      <MotiView\n        from={animate ? { opacity: 0, scale: 0.9 } : {}}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ type: 'timing', duration: 200 }}\n      >\n        <StyledTouchableOpacity \n          className={baseStyles}\n          onPress={onPress}\n          activeOpacity={0.95}\n        >\n          {children}\n        </StyledTouchableOpacity>\n      </MotiView>\n    );\n  }\n\n  return (\n    <MotiView\n      from={animate ? { opacity: 0, scale: 0.9 } : {}}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ type: 'timing', duration: 200 }}\n      className={baseStyles}\n    >\n      {children}\n    </MotiView>\n  );\n};\n\n// Button Component with animations\ninterface ButtonProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'secondary' | 'accent' | 'success' | 'warning' | 'destructive' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  onPress?: () => void;\n  disabled?: boolean;\n  loading?: boolean;\n  className?: string;\n}\n\nexport const Button: React.FC<ButtonProps> = ({ \n  children, \n  variant = 'default', \n  size = 'md', \n  onPress, \n  disabled = false,\n  loading = false,\n  className = '' \n}) => {\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'secondary':\n        return 'bg-secondary-500';\n      case 'accent':\n        return 'bg-accent-500';\n      case 'success':\n        return 'bg-success-500';\n      case 'warning':\n        return 'bg-warning-500';\n      case 'destructive':\n        return 'bg-error-500';\n      case 'outline':\n        return 'border-2 border-primary-500 bg-transparent';\n      case 'ghost':\n        return 'bg-transparent';\n      default:\n        return 'bg-primary-500';\n    }\n  };\n\n  const getTextStyles = () => {\n    if (variant === 'outline' || variant === 'ghost') {\n      return 'text-primary-500';\n    }\n    return 'text-white';\n  };\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'sm': return 'px-3 py-2 text-sm';\n      case 'lg': return 'px-6 py-4 text-lg';\n      case 'xl': return 'px-8 py-5 text-xl';\n      default: return 'px-4 py-3 text-base';\n    }\n  };\n\n  return (\n    <MotiView\n      animate={{ scale: disabled ? 0.95 : 1 }}\n      transition={{ type: 'timing', duration: 100 }}\n    >\n      <StyledTouchableOpacity \n        className={`rounded-2xl items-center justify-center font-medium transition-all ${\n          getVariantStyles()\n        } ${getSizeStyles()} ${\n          disabled ? 'opacity-50' : ''\n        } ${className}`}\n        onPress={onPress}\n        disabled={disabled || loading}\n        activeOpacity={0.8}\n      >\n        {loading ? (\n          <ActivityIndicator color={variant === 'outline' || variant === 'ghost' ? colors.primary : 'white'} />\n        ) : (\n          <StyledText className={`font-medium ${getTextStyles()}`}>\n            {children}\n          </StyledText>\n        )}\n      </StyledTouchableOpacity>\n    </MotiView>\n  );\n};\n\n// Badge Component for risk scores and status\ninterface BadgeProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'primary' | 'secondary' | 'accent' | 'success' | 'warning' | 'destructive';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport const Badge: React.FC<BadgeProps> = ({ children, variant = 'default', size = 'md', className = '' }) => {\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-primary-100 text-primary-800';\n      case 'secondary':\n        return 'bg-secondary-100 text-secondary-800';\n      case 'accent':\n        return 'bg-accent-100 text-accent-800';\n      case 'success':\n        return 'bg-success-100 text-success-800';\n      case 'warning':\n        return 'bg-warning-100 text-warning-800';\n      case 'destructive':\n        return 'bg-error-100 text-error-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'sm': return 'px-2 py-1 text-xs';\n      case 'lg': return 'px-4 py-2 text-base';\n      default: return 'px-3 py-1 text-sm';\n    }\n  };\n\n  return (\n    <MotiView\n      from={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ type: 'spring', duration: 300 }}\n    >\n      <StyledView className={`rounded-full font-medium ${getVariantStyles()} ${getSizeStyles()} ${className}`}>\n        <StyledText className=\"font-medium\">{children}</StyledText>\n      </StyledView>\n    </MotiView>\n  );\n};\n\n// Risk Score Badge with color coding\ninterface RiskScoreBadgeProps {\n  score: number;\n  className?: string;\n}\n\nexport const RiskScoreBadge: React.FC<RiskScoreBadgeProps> = ({ score, className }) => {\n  const getVariant = (score: number) => {\n    if (score <= 30) return 'success';\n    if (score <= 50) return 'warning';\n    if (score <= 70) return 'secondary';\n    return 'destructive';\n  };\n\n  const getLabel = (score: number) => {\n    if (score <= 30) return 'Low Risk';\n    if (score <= 50) return 'Medium Risk';\n    if (score <= 70) return 'High Risk';\n    return 'Critical Risk';\n  };\n\n  return (\n    <Badge variant={getVariant(score)} className={className}>\n      {score} - {getLabel(score)}\n    </Badge>\n  );\n};\n\n// Input Component with CivicLens styling\ninterface InputProps {\n  placeholder?: string;\n  value?: string;\n  onChangeText?: (text: string) => void;\n  secureTextEntry?: boolean;\n  keyboardType?: 'default' | 'email-address' | 'numeric' | 'phone-pad';\n  multiline?: boolean;\n  numberOfLines?: number;\n  editable?: boolean;\n  className?: string;\n  error?: boolean;\n}\n\nexport const Input: React.FC<InputProps> = ({ \n  placeholder, \n  value, \n  onChangeText, \n  secureTextEntry, \n  keyboardType = 'default',\n  multiline = false,\n  numberOfLines = 1,\n  editable = true,\n  className = '',\n  error = false\n}) => {\n  const borderColor = error ? 'border-error-300' : 'border-gray-300 focus:border-primary-500';\n  \n  return (\n    <StyledTextInput\n      className={`rounded-2xl border bg-white px-4 py-3 text-base ${borderColor} ${!editable ? 'opacity-50' : ''} ${className}`}\n      placeholder={placeholder}\n      placeholderTextColor={colors.gray[400]}\n      value={value}\n      onChangeText={onChangeText}\n      secureTextEntry={secureTextEntry}\n      keyboardType={keyboardType}\n      multiline={multiline}\n      numberOfLines={numberOfLines}\n      editable={editable}\n    />\n  );\n};\n\n// Loading Spinner Component\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'large';\n  color?: string;\n  className?: string;\n}\n\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  size = 'small', \n  color = colors.primary, \n  className = '' \n}) => {\n  return (\n    <MotiView\n      from={{ rotate: '0deg' }}\n      animate={{ rotate: '360deg' }}\n      transition={{ type: 'timing', duration: 1000, loop: true }}\n      className={className}\n    >\n      <ActivityIndicator size={size} color={color} />\n    </MotiView>\n  );\n};\n\n// Empty State Component\ninterface EmptyStateProps {\n  icon?: string;\n  title: string;\n  description?: string;\n  action?: React.ReactNode;\n  className?: string;\n}\n\nexport const EmptyState: React.FC<EmptyStateProps> = ({ icon, title, description, action, className = '' }) => {\n  return (\n    <MotiView\n      from={{ opacity: 0, translateY: 20 }}\n      animate={{ opacity: 1, translateY: 0 }}\n      transition={{ type: 'timing', duration: 400 }}\n      className={`flex-1 items-center justify-center py-12 ${className}`}\n    >\n      {icon && (\n        <StyledText className=\"text-6xl mb-4\">{icon}</StyledText>\n      )}\n      <StyledText className=\"text-lg font-semibold text-gray-900 mb-2 text-center\">{title}</StyledText>\n      {description && (\n        <StyledText className=\"text-gray-500 mb-4 text-center max-w-sm\">{description}</StyledText>\n      )}\n      {action && action}\n    </MotiView>\n  );\n};\n\n// Module Icon Component\ninterface ModuleIconProps {\n  module: 'procureLens' | 'feeCheck' | 'rtiCopilot' | 'fairLine' | 'permitPath' | 'wardWallet';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport const ModuleIcon: React.FC<ModuleIconProps> = ({ module, size = 'md', className = '' }) => {\n  const getSizeStyles = () => {\n    switch (size) {\n      case 'sm': return 'w-8 h-8';\n      case 'lg': return 'w-16 h-16';\n      default: return 'w-12 h-12';\n    }\n  };\n\n  const getTextSize = () => {\n    switch (size) {\n      case 'sm': return 'text-lg';\n      case 'lg': return 'text-4xl';\n      default: return 'text-2xl';\n    }\n  };\n\n  const moduleConfig = {\n    procureLens: { icon: '🏛', color: 'text-primary-500' },\n    feeCheck: { icon: '💵', color: 'text-secondary-500' },\n    rtiCopilot: { icon: '📜', color: 'text-accent-500' },\n    fairLine: { icon: '⚖️', color: 'text-error-500' },\n    permitPath: { icon: '📋', color: 'text-warning-500' },\n    wardWallet: { icon: '📊', color: 'text-success-500' },\n  };\n\n  const config = moduleConfig[module];\n\n  return (\n    <MotiView\n      from={{ scale: 0 }}\n      animate={{ scale: 1 }}\n      transition={{ type: 'spring', duration: 500 }}\n      className={`items-center justify-center rounded-2xl ${getSizeStyles()} ${className}`}\n    >\n      <StyledText className={`${getTextSize()}`}>{config.icon}</StyledText>\n    </MotiView>\n  );\n};\n\n// Language Toggle Component\ninterface LanguageToggleProps {\n  currentLanguage: 'en' | 'bn';\n  onLanguageChange: (language: 'en' | 'bn') => void;\n  className?: string;\n}\n\nexport const LanguageToggle: React.FC<LanguageToggleProps> = ({ currentLanguage, onLanguageChange, className = '' }) => {\n  return (\n    <StyledView className={`flex-row items-center space-x-2 ${className}`}>\n      <Button\n        variant={currentLanguage === 'en' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onPress={() => onLanguageChange('en')}\n      >\n        English\n      </Button>\n      <Button\n        variant={currentLanguage === 'bn' ? 'default' : 'ghost'}\n        size=\"sm\"\n        onPress={() => onLanguageChange('bn')}\n      >\n        বাংলা\n      </Button>\n    </StyledView>\n  );\n};\n\n// Floating Action Button for quick actions\ninterface FABProps {\n  icon: string;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary' | 'accent';\n  className?: string;\n}\n\nexport const FloatingActionButton: React.FC<FABProps> = ({ icon, onPress, variant = 'primary', className = '' }) => {\n  const getVariantStyles = () => {\n    switch (variant) {\n      case 'secondary': return 'bg-secondary-500';\n      case 'accent': return 'bg-accent-500';\n      default: return 'bg-primary-500';\n    }\n  };\n\n  return (\n    <MotiView\n      from={{ scale: 0, rotate: '0deg' }}\n      animate={{ scale: 1, rotate: '360deg' }}\n      transition={{ type: 'spring', duration: 600 }}\n      className={`absolute bottom-6 right-6 ${className}`}\n    >\n      <StyledTouchableOpacity\n        className={`w-14 h-14 rounded-full items-center justify-center shadow-lg ${getVariantStyles()}`}\n        onPress={onPress}\n        activeOpacity={0.8}\n      >\n        <StyledText className=\"text-2xl\">{icon}</StyledText>\n      </StyledTouchableOpacity>\n    </MotiView>\n  );\n};